generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WalletType {
  external
  smart
  embedded
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String?               // Hashed password, nullable for OAuth-only users
  displayName          String?
  avatar               String?
  isAdmin              Boolean               @default(false)
  createdAt            DateTime              @default(now())
  
  ApiKey               ApiKey[]
  wallets              Wallet[]
  accounts             Account[]             // OAuth accounts
  phoneLogins          PhoneLogin[]          // phone login records
  webAuthnCredentials  WebAuthnCredential[]  // passkey / WebAuthn credentials
}

model Wallet {
  id         Int        @id @default(autoincrement())
  address    String     @unique
  walletType WalletType
  label      String?
  chainId    Int?
  metadata   Json?
  ensName    String?
  userId     Int
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id])
}

model ApiKey {
  id             Int             @id @default(autoincrement())
  name           String
  clientId       String          @unique
  secretKey      String
  allowedDomains String
  bundleIds      String?
  isRevoked      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         Int
  User           User            @relation(fields: [userId], references: [id])
  ApiKeyServices ApiKeyServices?
}

model ApiKeyServices {
  id           Int     @id @default(autoincrement())
  apiKeyId     Int     @unique
  sdk          Boolean @default(true)
  rpc          Boolean @default(false)
  ipfsUpload   Boolean @default(false)
  ipfsDownload Boolean @default(false)
  bundler      Boolean @default(false)
  paymaster    Boolean @default(false)
  ApiKey       ApiKey  @relation(fields: [apiKeyId], references: [id])
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  provider          String   // e.g. "github", "discord", "twitter"
  providerAccountId String   // user ID from OAuth provider
  accessToken       String?  // optional
  refreshToken      String?  // optional
  expiresAt         Int?     // optional, timestamp for token expiration
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model PhoneLogin {
  id             Int       @id @default(autoincrement())
  userId         Int?      // nullable, if user linked
  phoneNumber    String    @unique
  otp            String?   // current OTP code
  otpExpires     DateTime? // OTP expiration timestamp
  verified       Boolean   @default(false)
  failedAttempts Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user           User?     @relation(fields: [userId], references: [id])
}

model WebAuthnCredential {
  id           Int      @id @default(autoincrement())
  userId       Int
  credentialId String   @unique // base64url encoded credential ID
  publicKey    String   // base64url encoded public key
  counter      Int      @default(0)
  transports   String?  // e.g. "usb,ble,nfc"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])
}
